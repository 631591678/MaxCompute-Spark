package com.aliyun.odps.spark.examples.clientmode

import java.util

import com.aliyun.odps.cupid.CupidSession
import com.aliyun.odps.cupid.client.spark.client.CupidSparkClientRunner
import com.aliyun.odps.cupid.jobclient.spark.api.SubmitParam

/**
  * @author Jon (wangzhong.zw@alibaba-inc.com)
  */
object ClientModeDemo {
  def main(args: Array[String]) {

    val submitParam = new SubmitParam
    val conf = new util.HashMap[String, String]()
    conf.put("spark.hadoop.odps.project.name", "xxxxx")
    conf.put("spark.hadoop.odps.access.id", "xxxxx")
    conf.put("spark.hadoop.odps.access.key", "xxxxx")
    conf.put("spark.hadoop.odps.end.point", "xxxxx")
    conf.put("spark.hadoop.odps.task.major.version", "cupid_v2")

    /**
      * This config allows user to use the spark libraries stored in the cluster. It is not ready yet, please contact
      * wangzhong.zw@alibaba-inc.com.
      */
    conf.put("odps.cupid.resources", "public.__spark_libs__.zip")
    submitParam.setConf(conf)
//    submitParam.loadConfFromFile("/Path/to/config_file");

    /**
      * Start spark client & remote driver. Remote driver is used to handle the following job requests
      * (e.g. addJar, startJob, killJob)
      */
    val sparkClient = CupidSparkClientRunner.getReadyCupidSparkClient(submitParam)

    /**
      * Lookup name is what you use to restart a saprk client
      */
    val lookupName = CupidSession.get().getJobLookupName
    println(lookupName)

    /**
      * Run a spark application
      */
    val jarPath = "/Path/to/MaxCompute-Spark/spark-2.x/target/spark-examples_2.11-1.0.0-SNAPSHOT-shaded.jar"
    val jarName = sparkClient.addJar(jarPath)
    val clientModeInitApp = new ClientModeInitApp(sparkClient)
    clientModeInitApp.run(jarName)

    /**
      * Run another spark application, with the result generated by the previous spark application
      */
    val clientModeProcessApp = new ClientModeProcessApp(sparkClient)
    clientModeProcessApp.run(jarName)

    /**
      * You can start a new spark client with the lookup name, as long as the remote driver is alive. The remote driver
      * will terminate after 30 minutes if it didn't receiver any heartbeat from client.
      */
//    val reConnectedSparkClient = CupidSparkClientRunner.getSparkClientWithLookupName(lookupName)

    /**
      * Shutdown the remove driver
      */
    sparkClient.stopRemoteDriver()
  }
}
